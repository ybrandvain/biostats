{
  "hash": "f438f9673c9d16a59aac546208adc295",
  "result": {
    "engine": "knitr",
    "markdown": "## â€¢ 10. Making cleaR plots {.unnumbered}\n\n\n\n\n---\nformat: html\nwebr:\n  packages: ['dplyr', 'readr' ,'ggplot2','forcats','Hmisc']\n  autoload-packages: false\n---\n\n\n\n\n\n\n\n::: {.motivation style=\"background-color: #ffe6f7; padding: 10px; border: 1px solid #ddd; border-radius: 5px;\"}\n\n**Motivating Scenario:**\n\nYou're proud of yourself for successfully creating a plot with `ggplot2`. But looking at it, you realize it's not particularly good, and that the plot breaks many of the dataviz guidelines we went over in the last chapter. Now you want to go from this basic plot to a good which clearly and honestly shows your results.   \n\n**Learning Goals: By the end of this subchapter, you should be able to:**\n\n1.  **Diagnose the flaws in a default plot** by identifying common problems like unreadable labels, cryptic names, and poorly chosen visual representations.     \n\n2.  **Ensure labels are clear and informative** by:\n    * Flipping coordinates to handle long category names.\n    * Using `labs()` to provide descriptive axis and legend titles.\n    * Using `scale_*_manual()` to rename shorthand categories in a legend.  \n \n3.  **Represent data points honestly and guide the reader's eye** with:\n    * Controlled `geom_jitter()` to avoid overplotting without distorting the data's meaning.\n    * `stat_summary()` to add visual summaries like means and error bars.     \n    \n\n4.  **Arrange plot elements to reveal patterns** by using functions from the `forcats` package to order categorical data meaningfully (e.g., by value or in a specific manual order).   \n\n\n5.  **Explore alternative views of your data** by:  \n    * Using faceting to create small multiples that highlight different comparisons.\n    * Applying direct labeling as a powerful alternative to legends.\n\n\n:::\n\n\n## Making Clear Plots in R\n\nIn the previous chapter we discussed that clear plots  (*1*) Have Informative and Readable Labels (*2*) Minimize cognitive burden, (*3*) Make points obvious, and (*4*) Avoid distractions. In this subsection, we focus on how to accomplish these goals in ggplot. \n\nTo do so, we initially focus on a truly heinous plot, which aims to compare petal area across field sites and subspecies. We can see that @fig-bad is basically unreadable:  \n\n- We can't tell which data point is associated with which category. \n- The x-axis labels bump into each other, so we can't read them anyway.   \n- How are there negative values for area?   \n- The meaning of  `area` `site_ssp`, `ssp`, `P`, `X`, and `X?` are unclear.   \n- It's hard to follow patterns (but there are some bigger things and lower things)!   \n\nSo, we give it a \"makeover\" to turn it into a solid explanatory plot. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Loading and formatting hybrid zone data\"}\nlibrary(stringr)\nhz_pheno_link <- \"https://raw.githubusercontent.com/ybrandvain/datasets/refs/heads/master/clarkia_hz_phenotypes.csv\"\n\nhz_phenos <- read_csv(hz_pheno_link) |>\n  filter(replicate == \"N\")           |>\n  select(site, ssp =subspecies, prot = avg_protandry, herk = avg_herkogamy, area = avg_petal_area, lat, lon) |>\n  mutate(site_ssp = paste(site, ssp),\n         site_ssp = str_replace(string = site_ssp , pattern = \" X\\\\?\",replacement = \" uncertain\"),\n         site_ssp = str_replace(string = site_ssp , pattern = \" X\",replacement = \" xantiana\"),\n         site_ssp = str_replace(string = site_ssp , pattern = \" P\",replacement = \" parviflora\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = site_ssp, y = area)) +\n  geom_jitter(width = 1, height =1)\n```\n\n::: {.cell-output-display}\n![Our starting plot. The x-axis labels are unreadable, and the legend labels are unclear, data points are all over the place.](cleaR_plots_files/figure-html/fig-bad-1.png){#fig-bad fig-alt='A scatter plot with \\'area\\' on the y-axis and \\'site_ssp\\' on the x-axis. Black data points are scattered vertically for numerous categories. The text labels for the categories on the x-axis are so long and close together that they overlap into an unreadable black mass.' width=672}\n:::\n:::\n\n\n\n\n\nAfter improving this plot and considering alternatives, we conclude by introducing a few other data sets to cover additional topics in how to go from a solid exploratory plot to a good explanatory plot!   \n\n### Ensuring Labels Are Readable and Informative \n\n#### Step 1: Making Labels Readable by Flipping Coordinates\n\nThe first problem to solve is the overlapping text. There are two possible solutions: \n\n- Flipping the x and y axes is my favorite solution because so the long labels have room to breathe on the y-axis (Panel: *Switch x & y*).  \n- Rotating the labels on the x-axis is also acceptable, but can be a pain in the neck (Panel: *Rotate X label*).   \n\n\n\n```{webr-r}\n#| context: setup\nlibrary(readr)\nlibrary(dplyr)\nlibrary(stringr)\nhz_pheno_link <- \"https://raw.githubusercontent.com/ybrandvain/datasets/refs/heads/master/clarkia_hz_phenotypes.csv\"\n\nhz_phenos <- read_csv(hz_pheno_link) |>\n  filter(replicate == \"N\", !is.na(avg_petal_area))           |>\n  select(site, ssp =subspecies, prot = avg_protandry, herk = avg_herkogamy, area = avg_petal_area,lat, lon) |>\n  mutate(site_ssp = paste(site, ssp),\n         site_ssp = str_replace(string = site_ssp , pattern = \" X\\\\?\",replacement = \" uncertain\"),\n         site_ssp = str_replace(string = site_ssp , pattern = \" X\",replacement = \" xantiana\"),\n         site_ssp = str_replace(string = site_ssp , pattern = \" P\",replacement = \" parviflora\"))\n```\n\n\n::: {.panel-tabset group=\"language\"}\n\n#### Switch x & y\n\nTo learn how to swap x and y axes, let's start with the code from @fig-bad here.  \n\n- First run the code to make sure it works.     \n   - It should look like @fig-bad.   \n   \n- Then **switch x and y** and see what's changed.    \n   - It should look like @fig-badflipped.  \n\n\n\n\n```{webr-r}\nlibrary(ggplot2)\nggplot(hz_phenos, aes(x = site_ssp, y = area)) +\n  geom_jitter(width = 1, height =1)\n```\n\n\n\n<div class='webex-solution'><button>Here's the answer if you can't figure it out.</button>\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = area, y = site_ssp)) +\n  geom_jitter(width = 1, height =1)\n```\n\n::: {.cell-output-display}\n![Our starting plot - now with flipped axes. The legend labels are unclear, data points are all over the place, but now we can read the categories, so that's something.](cleaR_plots_files/figure-html/fig-badflipped-1.png){#fig-badflipped fig-alt='A scatter plot with \\'area\\' on the x-axis and \\'site_ssp\\' on the y-axis. Black data points are scattered vertically for numerous categories. The text labels for the categories on the y-axis can now be read! But patters are still unclear.' width=672}\n:::\n:::\n\n\n\n\n\n</div>\n\n\n\n\n#### Rotate x labels\n\nHere is the alternative solution in which we can rotate the x-axis labels, which we accomplish through the theme function:  \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x =  site_ssp, y = area)) +\n  geom_jitter(width = 1, height =1)+\n  theme(axis.text.x = element_text(angle = 90))\n```\n\n::: {.cell-output-display}\n![Our starting plot - now with rotated x-labels. The legend labels are unclear, data points are all over the place, but now we can read the categories, so that's something.](cleaR_plots_files/figure-html/fig-badrotate-1.png){#fig-badrotate fig-alt='A scatter plot with \\'area\\' on the y-axis and \\'site_ssp\\' on the x-axis. Black data points are jittered. The text labels for the categories on the x-axis can now be read! But patters are still unclear.' width=672}\n:::\n:::\n\n\n\n\n:::\n\n---\n\n#### Step 2: Making Labels Informative by Changing Labels \n\n\nSpreadsheets and datasets often use shorthand for column names or categories. Such shorthand can make data analysis more efficient, but makes figures unclear to an outside audience.  We could maybe guess that `area` referred to petal area, and that `site_ssp` meant the combination of site and species, but that's not fully clear.  \n\nReplace `<ADD A GOOD X LABEL HERE>` and  `<ADD A GOOD Y LABEL HERE>` in the [`labs()`](https://ggplot2.tidyverse.org/reference/labs.html) function of the code below to make a clearly labelled figure (See my answer in @fig-clearlabs1).\n\n\n\n\n```{webr-r}\nlibrary(ggplot2)\nggplot(hz_phenos, aes(x = area, y = site_ssp)) +\n  geom_jitter(width = 1, height =1)+\n  labs(x = \"<ADD A GOOD X LABEL HERE>\", \n       y = \"<ADD A GOOD Y LABEL HERE>\")\n```\n\n\n\n<div class='webex-solution'><button>Yaniv's code for clearer labels.</button>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = area, y = site_ssp)) +\n  geom_jitter(width = 1, height =1)+\n  labs(x = \"Petal area (mm^2)\", y = \"Site and subspecies combination\")\n```\n\n::: {.cell-output-display}\n![Our starting plot - now with flipped axesand better labels. The legend labels are unclear, data points are all over the place, but now we can read the categories and know what X and Y mean, so that's something.](cleaR_plots_files/figure-html/fig-clearlabs1-1.png){#fig-clearlabs1 fig-alt='A scatter plot with \\'area\\' on the x-axis and \\'site_ssp\\' on the y-axis. Black data points are scattered vertically for numerous categories. The text labels for the categories on the y-axis can now be read, and the meaning of X and Y are now clear! But patters are still unclear.' width=672}\n:::\n:::\n\n\n\n\n\n\n\n</div>\n\n\n\n#### Step 3: Picking Colors to Make Labels Informative \n\nAlthough the Y axis (now) should provide enough information to understand the plot, associating color with a variable can make patterns stick out.   \n\n@fig-color2 (in *Panel: Default colors*)  does this by mapping subspecies onto color.   \n\n@fig-clearlabscolor (in *Panel: Color choice + better labels + choose order*) takes further control by picking colors ourselves or using a fun and informative color palette.  \n\n\n\n::: {.panel-tabset group=\"language\"}\n\n#### Default colors\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = area, y = site_ssp, color = ssp)) +\n  geom_jitter(width = 1, height =1)+\n  labs(x = \"Petal area (mm^2)\", \n       y = \"Site and subspecies combination\", \n       color = \"subspecies\")\n```\n\n::: {.cell-output-display}\n![This plot improves on previous figures by using color to show which data point came from which subspecies.](cleaR_plots_files/figure-html/fig-color2-1.png){#fig-color2 fig-alt='A scatter plot with \\'area\\' on the x-axis and \\'site_ssp\\' on the y-axis. Data points are scattered and colored by subspecies. The text labels for the categories on the y-axis can now be read, and the meaning of X and Y are now clear! A pattern is beginning to emerge!' width=672}\n:::\n:::\n\n\n\n\n\n#### Color choice + better labels + choose order\n\nHere we have taken control of defaults, using **[`scale_color_manual()`](https://ggplot2.tidyverse.org/reference/scale_manual.html)**  to rename the **categories within the legend**.    \n\n- `values = c(...)` sets the colors for the categories.    \n- `breaks = c(\"X?\", \"X\", \"P\")` specifies the original shorthand values from the data and sets the order they should appear in the legend.     \n- `labels = c(\"uncertain\", \"xantiana\", \"parviflora\")` provides the new, descriptive labels that correspond to the items listed in `breaks`.  \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = area, y = site_ssp, color = ssp)) +\n  geom_jitter(width = 1, height =1)+\n  labs(x = \"Petal area (mm^2)\", \n       y = \"Site and subspecies combination\", \n       color = \"subspecies\")+\n  scale_color_manual(values = c(\"yellow\", \"red3\", \"cornflowerblue\"),\n                     breaks = c(\"X?\", \"X\", \"P\"), \n                     labels = c(\"uncertain\", \"xantiana\", \"parviflora\"))\n```\n\n::: {.cell-output-display}\n![This plot improves on previous figures by using color to show which data point came from which subspecies. Colors are chosen intentionally and default category names are replaced with legible names.](cleaR_plots_files/figure-html/fig-clearlabscolor-1.png){#fig-clearlabscolor fig-alt='A scatter plot with \\'area\\' on the x-axis and \\'site_ssp\\' on the y-axis. Data points are scattered and colored by subspecies. The text labels for the categories on the y-axis can now be read, and the meaning of X and Y are now clear! A pattern is beginning to emerge!' width=672}\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Choosing Your `ggplot2` Colors\n\nThere are many \"color palettes\" available in R to add some fun to you figures. Check out these options, but be sure to check for accessibility (the [`colorblindcheck` package](https://jakubnowosad.com/colorblindcheck/) can help).\n\n* **`RColorBrewer`**: This option comes with `ggplot2`. Use [`scale_fill_brewer()`](https://ggplot2.tidyverse.org/reference/scale_brewer.html) or [`scale_color_brewer()`](https://ggplot2.tidyverse.org/reference/scale_brewer.html) for a wide range of well-designed sequential, qualitative, and diverging palettes.\n\n* **`viridis`**: The most commonly used palette  for scientific plots is also built into ggplot2. Its palettes are perceptually uniform and friendly to viewers with color vision deficiency. Use [`scale_color_viridis_d()`](https://ggplot2.tidyverse.org/reference/scale_viridis.html) (for discrete data) or [`scale_color_viridis_c()`](https://ggplot2.tidyverse.org/reference/scale_viridis.html) (for continuous data). Change `color` to `fill` as necessary. \n\n* **Themed & Fun Palettes**: Add personality to your plots with packages like [`wesanderson`](https://github.com/karthik/wesanderson),  or the artistically-inspired [`MetBrewer`](https://www.blakerobertmills.com/my-work/met-brewer). These typically provide a vector of colors to use with `scale_color_manual()`. See this [link](https://emilhvitfeldt.github.io/r-color-palettes/discrete.html) for an extensive list of options. \n\n* **The [`colorspace`](https://cran.r-project.org/web/packages/colorspace/vignettes/colorspace.html) package**: This package is great for creating your own high-quality, color-blind safe custom palettes (based on perceptually-uniform color models).\n:::\n\n\n\n### Making Patterns Clear   \n\nWe've come a long way from @fig-bad -- @fig-clearlabscolor is much improved, and we can now see the *xantiana* likely has larger petals than *parviflora*. But it's still hard to make much sense of these data. Let's further clarify this plot.\n\n#### Step 4: Choosing the Appropriate jitter   \n\nA huge problem with this plot are that data points are spread all over the place, because we used the `geom_jitter()` function. At times jittering points is a good way to prevent over-plotting - but it can be a problem when jittered points change our data or make patterns unclear.  In our case jittering introduces both issues: \n\n- Because of the large jitter height, data points aren't lined up with their category.  \n- Because of the large jitter width, data points are wrong (notice the negative values for petal area.)\n\nThere are two solutions: \n\n**1. Use `geom_point()`:** I always use geom_point when x, and y are continuous variables. In such cases using **jitter actually changes our data, and should be avoided**.    \n\n**2. Choose appropriate jitter sizes:** When an axis is categorical, jittering points along the axis makes sense, but \n\n   - Be sure that points don't run across categories (jitter should be small) for the categorical variable. \n   - Be sure that points aren't jittered for the axis with the continuous variable. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = area, y = site_ssp, color = ssp)) +\n  geom_jitter(width = 0, height =.25, size=3, slpha = .7)+\n  labs(x = \"Petal area (mm^2)\", \n       y = \"Site and subspecies combination\", \n       color = \"subspecies\")+\n  scale_color_manual(values = c(\"yellow\", \"red3\", \"cornflowerblue\"),\n                     breaks = c(\"X?\", \"X\", \"P\"), \n                     labels = c(\"uncertain\", \"xantiana\", \"parviflora\"))\n```\n\n::: {.cell-output-display}\n![This plot improves on previous figures by using color to show which data point came from which subspecies. Colors are chosen intentionally and default category names are replaced with legible names. We can now see the true petal area, and unambiguously determine which category a datpoint came from (while avoiding overplotting)](cleaR_plots_files/figure-html/fig-close-1.png){#fig-close fig-alt='A scatter plot with \\'area\\' on the x-axis and \\'site_ssp\\' on the y-axis. Data points are scattered and colored by subspecies. The text labels for the categories on the y-axis can now be read, and the meaning of X and Y are now clear! Points are now pretty good!' width=672}\n:::\n:::\n\n\n\n\n#### Step 5: Showing Data Summaries\n\nWe are really getting there! The previous plot shows the raw data clearly, but it's still hard to precisely estimate the mean petal area for each group or see the uncertainty in that estimate. Summary statistics can guide the reader's eye and make the main patterns more obvious.\n\nThe [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html)  function computes summaries for us and add them to our plot.  We'll explore two common approaches:\n\n\n- *Adding bars* to show the mean (Panel: *Adding a bar*).   \n- *Adding points and error bars* to show the mean and its uncertainty.(Panel: *Adding errorbars*).  \n\n\n\n::: {.panel-tabset group=\"language\"}\n\n#### Adding a bar\n\nBars allow for effective and rapid estimation of group means, and differences among groups. But adding bars to a plot without care can cover up our raw data. Three tricks to avoid this are: \n\n- Add the stat_summary() layer before geom_jitter(). to ensures the raw data points are plotted on top of the bars. \n- Making bars semi-transparent (via the `alpha` argument).   \n- Making the bars a different color than the data points (e.g. `fill = \"black\"`). \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = area, y = site_ssp, color = ssp)) +\n  stat_summary(geom = \"bar\",alpha = .1)+\n  geom_jitter(width = 0, height =.25, size=3, alpha = .7)+\n  labs(x = \"Petal area (mm^2)\", \n       y = \"Site and subspecies combination\", \n       color = \"subspecies\")+\n  scale_color_manual(values = c(\"yellow\", \"red3\", \"cornflowerblue\"),\n                     breaks = c(\"X?\", \"X\", \"P\"), \n                     labels = c(\"uncertain\", \"xantiana\", \"parviflora\"))\n```\n\n::: {.cell-output-display}\n![This plot improves on previous figures by adding a bar going from zero to each sample's mean.](cleaR_plots_files/figure-html/fig-closeish-1.png){#fig-closeish fig-alt='A scatter plot with \\'area\\' on the x-axis and \\'site_ssp\\' on the y-axis. Data points are scattered and colored by subspecies. The text labels for the categories on the y-axis can now be read, and the meaning of X and Y are now clear! For each category, a box starts at zero and goes to its mean!' width=672}\n:::\n:::\n\n\n\n\n\n#### Adding Errorbars \n\nAn alternative to bars is to show the mean and its uncertainty with a point and error bars. Here, we use stat_summary() again, we need to make some additional choices:  \n\n\n- *What the bars should show* I usually choose 95% Confidence intervals (more on that in a later chapter) with`fun.data = \"mean_cl_normal\"`.   \n   - **NOTE:** Standard errors,standard deviations, 95% confidence intervals and the like all different, and can be shown with bars. So you must communicate what the bars represent. I usually do this in the figure legend.        \n- *How to display the uncertainty* I usually choose error bars `geom = \"errorbar\"` of modest width (`width = 0.25`), but `geom = pointrange` can work too.   \n   \n   \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = area, y = site_ssp, color = ssp)) +\n  stat_summary(fun = \"mean\", geom = \"bar\", alpha = 0.2) +\n  geom_jitter(width = 0.0, height = 0.1, size = 3, alpha = 0.7) +\n  stat_summary(fun.data = \"mean_cl_normal\", geom = \"errorbar\", \n               color = \"black\", width = 0.25, \n               position = position_nudge(x = 0, y=.35))+\n  labs(x = \"Petal area (mm^2)\", \n       y = \"Site and subspecies combination\", \n       color = \"subspecies\")+\n  scale_color_manual(values = c(\"yellow\", \"red3\", \"cornflowerblue\"),\n                     breaks = c(\"X?\", \"X\", \"P\"), \n                     labels = c(\"uncertain\", \"xantiana\", \"parviflora\"))\n```\n\n::: {.cell-output-display}\n![This plot improves on previous figures by showing both means and 95% confidence intervals for each category.](cleaR_plots_files/figure-html/fig-closer-1.png){#fig-closer fig-alt='A scatter plot with \\'area\\' on the x-axis and \\'site_ssp\\' on the y-axis. Filled boxes go from zero to each category mean, and black bars show the 95% confidence interval for each group mean.' width=672}\n:::\n:::\n\n\n\n\n\n:::\n\n\n### Facilitate Key Comparisons \n\nWe have previously seen that the way we arrange our data can highlight key comparisons and make trends obvious. \n\n\n#### Step 6: Arrange Categories In A Sensible Order\n\n\nBy default, R orders categorical variables alphabetically, which is rarely the most insightful arrangement. To make patterns stand out, you should order categories based on a meaningful value. Two such meaningful values are:   \n\n- **The order of categories** If categories are ordinal show them in their natural order. (e.g. Months should go in order). Some things aren't exactly ordinal but they may have an order that makes trends clear -- for example our *Clarkia* field sites go (roughly) from south to north, so that order makes sense.   \n- **The order of values** If categories cannot be sensibly arranged by something about them, it often helps to arrange them by a summary statistic, like the mean or median of the numeric response variable you are plotting. This makes patterns easiest to spot.    \n\nWe can achieve either of these aims with functions in the [`forcats`](https://forcats.tidyverse.org/) package. This [pdf](https://raw.githubusercontent.com/rstudio/cheatsheets/main/factors.pdf) explains all the functions in the package, but most often I use:   \n\n:::aside   \n**NOTE** There is no connection between the order categories appear in a tibble and the order they are displayed in a plot. Changing the order of factors in a tibble will not change the way they are displayed in the tibble, and reordering observations in a tibble (e.g. with `arrange()`) will not  change their order in a plot.  \n:::\n\nLet's give this a shot in our *Clarkia* hybrid zone dataset. \n\n- First, let's reorder \"by hand\" with [`fct_relevel()`](https://forcats.tidyverse.org/reference/fct_relevel.html). \n- Then, let's reorder by some value with [`fct_reorder()`](https://forcats.tidyverse.org/reference/fct_reorder.html).  \n- Finally, let's reorder first by subspecies, and then by latitude with [`fct_reorder2()`](https://forcats.tidyverse.org/reference/fct_reorder.html).\n\n\n\n::: {.panel-tabset group=\"language\"}\n\n#### Order \"by hand\"\n\n\nWe can use [`fct_relevel()`](https://forcats.tidyverse.org/reference/fct_relevel.html) to reorder categories \"by hand.\" \n\nBelow, I place `\"S22 uncertain\"` last (i.e. at the top).  I do this by listing all variables in the order I want them. But if you just want to move one variable (as in this case), we can alternatively use the after argument:  \n\n   - To place it first `\"MYVAR\", after = 0`\n   - To place it last `\"MYVAR\", after = Inf`\n\n**Challenge:** Change the code to place `\"S22 uncertain\"` first (i.e. at the bottom as in @fig-uncertainfirst).\n \n*Note:* Due to space  considerations, this plot does not include all the best practices from above. Feel free to add them! \n\n\n```{webr-r}\nlibrary(ggplot2)\nlibrary(forcats)\n# CHANGE THIS\nhz_phenos  <- hz_phenos |>\n  mutate(site_ssp = fct_relevel(site_ssp, \n             \"S22 parviflora\", \"S22 xantiana\" , \n             \"S6 parviflora\",  \"S6 xantiana\" ,\n             \"SAW parviflora\", \"SAW xantiana\",   \n             \"SM parviflora\" , \"SM xantiana\" , \n             \"S22 uncertain\"))\n# PLOT **Don't change this**  \nggplot(hz_phenos, aes(x = area, \n                      y = site_ssp, \n                      color = ssp)) +\n  stat_summary(fun = \"mean\", \n               geom = \"bar\", \n               alpha = 0.2) +\n  geom_jitter(width = 0.0, height = 0.1, \n              size = 3, alpha = 0.7) \n```\n\n\n\n\n<div class='webex-solution'><button>Here's how to put 'S22 uncertain' first</button>\n \n\nTo place `S22 uncertain` first, use `fct_relevel(site_ssp, \"S22 uncertain\", after = 0)`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(ggplot2)\n\n# Reorder site_ssp placing S22 uncertain first\nhz_phenos <- hz_phenos |>\n    mutate(site_ssp = fct_relevel(site_ssp, \"S22 uncertain\", after = 0))\n\n# Plot the reordered data\nggplot(hz_phenos, aes(x = area, \n                          y = site_ssp, \n                          color = ssp)) +\n  stat_summary(fun = \"mean\", \n               geom = \"bar\", \n               alpha = 0.2) +\n  geom_jitter(width = 0.0, height = 0.1, \n              size = 3, alpha = 0.7) +\n  labs(y = \"Site & Subspecies (Ordered by Area)\", x = \"Petal Area\")\n```\n\n::: {.cell-output-display}\n![A plot showing site and subspecies combinations with S22 uncertain last.](cleaR_plots_files/figure-html/fig-uncertainfirst-1.png){#fig-uncertainfirst fig-alt='A horizontal bar plot where the y-axis categories are arranged so that S22 uncertain is last. Each bar has colored, jittered points overlaid, representing individual measurements.' width=672}\n:::\n:::\n\n\n\n\n\n\n</div>\n\n\n#### Order by a variable\n\n\n\n\nWe can use [`fct_reorder()`](https://forcats.tidyverse.org/reference/fct_reorder.html) to reorder categories by the area of some variable. Below, I include the code to reoder from smallest to largest petal area.  To get better with this approach, try the following challenges:   \n\n- Reorder from biggest to smallest petal area by including `.desc = TRUE` in `fct_reorder()`.    \n    - Solution  in @fig-areadesc.   \n- Reorder from smallest to biggest longitude (`lon`). .  \n    - Solution  in @fig-long.   \n\n\n*Note:* Due to space  considerations, this plot does not include all the best practices from above. Feel free to add them! \n\n\n```{webr-r}\nlibrary(ggplot2)\nlibrary(forcats)\n# CHANGE THIS\nhz_phenos  <- hz_phenos |>\n  mutate(site_ssp = fct_reorder(site_ssp, area))\n# PLOT **Don't change this**  \nggplot(hz_phenos, aes(x = area, \n                      y = site_ssp, \n                      color = ssp)) +\n  stat_summary(fun = \"mean\", \n               geom = \"bar\", \n               alpha = 0.2) +\n  geom_jitter(width = 0.0, height = 0.1, \n              size = 3, alpha = 0.7) \n```\n\n\n<div class='webex-solution'><button>Here's how to order by Descending Petal Area</button>\n \n\nTo reorder the categories from the largest mean petal area to the smallest, we use `fct_reorder()` and set the `.desc = TRUE` argument. This flips the default ascending order.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(ggplot2)\n\n# Reorder site_ssp by area, in descending order\nhz_phenos <- hz_phenos |>\n  filter(!is.na(area))|>\n  mutate(site_ssp = fct_reorder(site_ssp, area, .desc = TRUE,.na_rm = TRUE))\n\n\n# Plot the reordered data\nggplot(hz_phenos, aes(x = area, \n                          y = site_ssp, \n                          color = ssp)) +\n  stat_summary(fun = \"mean\", \n               geom = \"bar\", \n               alpha = 0.2) +\n  geom_jitter(width = 0.0, height = 0.1, \n              size = 3, alpha = 0.7) +\n  labs(y = \"Site & Subspecies (Ordered by Area)\", x = \"Petal Area\")\n```\n\n::: {.cell-output-display}\n![A plot showing site and subspecies combinations ordered by mean petal area, from largest (bottom) to smallest (top).](cleaR_plots_files/figure-html/fig-areadesc-1.png){#fig-areadesc fig-alt='A horizontal bar plot where the y-axis categories are arranged so that the bars decrease in length from the bottom of the plot to the top. Each bar has colored, jittered points overlaid, representing individual measurements.' width=672}\n:::\n:::\n\n\n\n\n\n\n</div>\n\n\n\n\n<div class='webex-solution'><button>Here's how to order from smallest to biggest longitude</button>\n \n\nTo reorder by longitude, let's put that variable in!\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(ggplot2)\n\n# Reorder site_ssp by area, in descending order\nhz_phenos <- hz_phenos |>\n  mutate(site_ssp = fct_reorder(site_ssp, lon))\n\n# Plot the reordered data\nggplot(hz_phenos, aes(x = area,\n                      y = site_ssp, \n                      color = ssp)) +\n  stat_summary(fun = \"mean\", \n               geom = \"bar\", \n               alpha = 0.2) +\n  geom_jitter(width = 0.0, height = 0.1, \n              size = 3, alpha = 0.7) +\n  labs(y = \"Site & Subspecies (Ordered by Area)\", x = \"Petal Area\")\n```\n\n::: {.cell-output-display}\n![A plot showing site and subspecies combinations ordered by mean longitude, from smallest (bottom) to largest (top).](cleaR_plots_files/figure-html/fig-long-1.png){#fig-long fig-alt='A horizontal bar plot where the y-axis categories are arranged by longitude. Each bar has colored, jittered points overlaid, representing individual measurements.' width=672}\n:::\n:::\n\n\n\n\n\n</div>\n\n\n#### Order by two things\n\nWe can order by more than one thing with `fct_reorder2()`. Below I order, first by longitude and then by subspecies, but strangely to do so, we type `ssp` first and then `lon`. \n\n\n\n**Challenge:** Change the code order first by subspecies and then by longitude..\n \n \n```{webr-r}\nlibrary(ggplot2)\nlibrary(forcats)\n\nhz_phenos  <- hz_phenos |>\n  mutate(site_ssp = fct_reorder2(site_ssp, ssp, lon))\n\n# PLOT **Don't change this**  \nggplot(hz_phenos, aes(x = area, \n                      y = site_ssp, \n                      color = ssp)) +\n  stat_summary(fun = \"mean\", \n               geom = \"bar\", \n               alpha = 0.2) +\n  geom_jitter(width = 0.0, height = 0.1, \n              size = 3, alpha = 0.7) \n```\n\n:::\n\n\n\n<div class='webex-solution'><button>Here's how to order by subspecies and then longitude</button>\n \n\nTo reorder by subspecies and the longitude, try `fct_reorder2(site_ssp, lon, ssp)`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(ggplot2)\n\n# Reorder site_ssp by subspecies and then by longitude.\nhz_phenos  <- hz_phenos |>\n  mutate(site_ssp = fct_reorder2(site_ssp, lon, ssp))\n\n# PLOT **Don't change this**  \nggplot(hz_phenos, aes(x = area, \n                      y = site_ssp, \n                      color = ssp)) +\n  stat_summary(fun = \"mean\", \n               geom = \"bar\", \n               alpha = 0.2) +\n  geom_jitter(width = 0.0, height = 0.1, \n              size = 3, alpha = 0.7) \n```\n\n::: {.cell-output-display}\n![A plot showing site and subspecies combinations ordered by subspecies and the mean longitude.](cleaR_plots_files/figure-html/fig-both-1.png){#fig-both fig-alt='A horizontal bar plot where the y-axis categories are arranged by subspecies and longitutde. Each bar has colored, jittered points overlaid, representing individual measurements.' width=672}\n:::\n:::\n\n\n\n\n\n</div>\n\n\n### Summary Improving a Plot\n\nWe've come a long way from that first \"heinous\" plot! Let's take a moment to appreciate the journey. We started with a plot that was confusing and basically unreadable. Step-by-step, we identified problems and applied targeted fixes:\n\n- **We made labels readable** by flipping the axes.   \n- **We made them informative** by replacing shorthand with clear names.    \n- **We controlled the jitter** to present the data's position honestly.    \n- **We added summary bars and error bars** to guide the reader's eye to the key patterns.  \n- **We reordered the categories** to make the comparison between groups clear and intuitive.    \n\nThe big takeaway is that making a great explanatory plot is an iterative process. You don't have to get it perfect on the first try. **The key is to critically look at your plot**, identify what's confusing or unclear, and then use the tools at your disposal to fix it. Our final plot isn't just \"prettier\", it's more honest, more informative, and a clearer story.\n\n\n---\n\n### Bonus: Explore Alternative Visualizations\n\nIt's always worthwhile to consider alternative visualizations of the same dataset to see which best reveals the key patterns in the data. I usually do this earlier in the figure-making process, but better late than never!\n\nHere, let's use \"small multiples\" - a series of small plots that use the same scales and axes to explore two additional approaches to gaining insight from these data. In my view both of these represent improvements over their analogues in the previous plots because the facets separate the  data to clearly highlight specific comparisons of interest. \n\n**OPTION 1 Facet by site** \n\n*The plot below \"facets\" data by site.*  I really like @fig-bysite because it allows us to visually compare the petal area of different subspecies when they are found at the same site. This makes it easy to see that the difference in petal area between subspecies is largest at \"Site 22\" and smallest at \"Site 6\".\n\n\n\n\n\n\n::: {.cell .column-page-right}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = ssp, y = area, color = ssp)) +\n  stat_summary(fun = \"mean\", geom = \"bar\", alpha = 0.2) +\n  geom_jitter(width = 0.1, height = 0.0, size = 3, alpha = 0.7) +\n  stat_summary(fun.data = \"mean_cl_normal\", geom = \"errorbar\", \n               color = \"black\", width = 0.25, \n               position = position_nudge(x = .35, y=0))+\n  labs(y = \"Petal area (mm^2)\", \n       x = \"Site and subspecies combination\", \n       color = \"subspecies\")+\n  facet_wrap(~site, nrow = 1, labeller = \"label_both\")+\n  scale_color_manual(values = c(\"yellow\", \"red3\", \"cornflowerblue\"),\n                     breaks = c(\"X?\", \"X\", \"P\"), \n                     labels = c(\"uncertain\", \"xantiana\", \"parviflora\"))+\n  theme(axis.text = element_text(size = 12), \n        axis.title = element_text(size = 12),\n        strip.text = element_text(size = 12))\n```\n:::\n\n::: {.cell .column-page-right}\n::: {.cell-output-display}\n![A faceted plot showing the petal area of each subspecies, broken down by site. Each panel represents a different field site, allowing for a direct comparison of subspecies within that site. This highlights the differences in petal area between subspecies across sites.](cleaR_plots_files/figure-html/fig-bysite-1.png){#fig-bysite fig-alt='A horizontal series of four plots in separate panels, each labeled with a site name like \\'site: S22\\'. Within each panel, the x-axis lists three subspecies, and the y-axis shows petal area. For each subspecies, a colored bar shows the mean value, with individual data points jittered over it. A black error bar is also present for each group, indicating the confidence interval.' width=1056}\n:::\n:::\n\n\n\n\n**OPTION 2 Facet by subspecies** \n\n*The plot below \"facets\" data by subspecies.*  I really like @fig-byssp because it allows us to visually compare how the petal area for a given subspecies changes across sites. This makes it easy to see that, for example, *parviflora* plants have their largest petals at Site 6, while *xantiana* plants have their largest at Site 22 and smallest at Site 6.\n\n\n\n\n\n::: {.cell .column-page-right}\n\n```{.r .cell-code}\nggplot(hz_phenos, aes(x = site, y = area, color = site)) +\n  stat_summary(fun = \"mean\", geom = \"bar\", alpha = 0.2) +\n  geom_jitter(width = 0.1, height = 0.0, size = 3, alpha = 0.7) +\n  stat_summary(fun.data = \"mean_cl_normal\", geom = \"errorbar\", \n               color = \"black\", width = 0.25, \n               position = position_nudge(x = .35, y=0))+\n  labs(y = \"Petal area (mm^2)\", \n       x = \"Site and subspecies combination\", \n       color = \"subspecies\")+\n  facet_wrap(~ssp, nrow = 1, labeller = \"label_both\")+\n  theme(axis.text = element_text(size = 12), \n        axis.title = element_text(size = 12),\n        strip.text = element_text(size = 12),\n        legend.position = \"none\")\n```\n:::\n\n::: {.cell .column-page-right}\n::: {.cell-output-display}\n![A faceted plot comparing petal area across sites, with each panel dedicated to a single subspecies. This view makes it easy to assess how the petal area of a specific subspecies changes from one geographic site to another.](cleaR_plots_files/figure-html/fig-byssp-1.png){#fig-byssp fig-alt='A horizontal series of three plots in separate panels, each labeled by subspecies (P, X, X?). Within each panel, the x-axis lists four different sites, and the y-axis shows petal area. For each site, a colored bar indicates the mean value, with individual data points jittered on top. A black error bar is also shown for each group.' width=1056}\n:::\n:::\n\n\n\n\n---\n\n\n### BONUS: Direct labeling\n\n\n\nSometimes, a legend can feel like a detour for your reader's eyes. Forcing them to look back and forth between the data and the key adds cognitive load. A great alternative is direct labeling, where you place labels right next to the data they describe. \n\nThere are two main tools for this in ggplot2:   \n\n- **Method 1: The \"ggplot Way\" with [`geom_label()`](https://ggplot2.tidyverse.org/reference/geom_text.html)**: This approach uses the same aes() aesthetic mapping you're already familiar with. You can map variables from your data to the label, x, and y aesthetics. It's best when the position of your label depends on the data itself (e.g., placing a label at the mean of a group).\n\nIn the example below, we calculate the mean position for each penguin species on the fly and use that to place the labels.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +\n    geom_point(alpha = 0.5) +\n    # Add labels using a summarized data frame\n    geom_label(data = penguins |>\n                 group_by(species) |>\n                 summarise_at(c(\"bill_depth_mm\", \"bill_length_mm\"), mean, na.rm = TRUE),\n               aes(label = species), fontface = \"bold\", size = 4, alpha=.6) +\n    # Remove the redundant legend\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![A scatter plot of penguin bill dimensions that uses direct labeling. The geom_label() layer calculates the mean position for each species and places the label directly on the plot, making it easier to identify the groups without a legend.](cleaR_plots_files/figure-html/fig-direct1-1.png){#fig-direct1 fig-alt='A scatter plot with \\'bill_depth_mm\\' on the x-axis and \\'bill_length_mm\\' on the y-axis. There are three distinct, colored clusters of data points. A text label (\\'Adelie\\', \\'Chinstrap\\', or \\'Gentoo\\') is placed in the center of each corresponding cluster. The plot does not have a separate color legend.' width=480}\n:::\n:::\n\n\n\n\n- **Method 2: The \"Manual Way\" with [`annotate()`](https://ggplot2.tidyverse.org/reference/annotate.html)**.  \n \nThe [`annotate()`](https://ggplot2.tidyverse.org/reference/annotate.html) function is for adding \"one-off\" plot elements. It does not use aesthetic mappings. Instead, you give it the exact coordinates and attributes for the thing you want to add.\n\nThis gives you precise control over label placement, but it comes at a price: it's not linked to your data and won't update automatically. It's best for adding a single title, an arrow, or manually placing a few labels where the position is fixed. I often choose this at the very last step of making an explanatory plot when there is a specific space I can see is best for such labels.\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +\n    geom_point(alpha = 0.5) +\n    # Add labels using a summarized data frame\n    annotate(geom = \"label\", label = c(\"Gentoo\", \"Chinstrap\", \"Adelie\"), \n             x = c(14, 18.5,20), y = c(55,55,34), \n             color = c(\"blue\",\"forestgreen\",\"red\"), \n             fontface = \"bold\", size = 5, alpha=.6)+\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![This plot demonstrates direct labeling using the annotate() function. This method provides precise control by requiring the user to manually specify the exact coordinates, text, and color for each label, independent of the data mapping.](cleaR_plots_files/figure-html/fig-direct2-1.png){#fig-direct2 fig-alt='A scatter plot with \\'bill_depth_mm\\' on the x-axis and \\'bill_length_mm\\' on the y-axis. There are three distinct, colored clusters of data points. A text label (\\'Adelie\\', \\'Chinstrap\\', or \\'Gentoo\\') has been manually placed over or near each corresponding cluster. The plot does not have a separate legend.' width=480}\n:::\n:::\n",
    "supporting": [
      "cleaR_plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}