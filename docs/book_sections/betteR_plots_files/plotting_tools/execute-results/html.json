{
  "hash": "a4dc741eac590271e658f0d2eda35bb0",
  "result": {
    "engine": "knitr",
    "markdown": "## ‚Ä¢ 10. Tools for BetteR plots {.unnumbered}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.motivation style=\"background-color: #ffe6f7; padding: 10px; border: 1px solid #ddd; border-radius: 5px;\"}\n**Motivating Scenario:**\n\nYou've successfully created a basic `ggplot`, but now you want to make it *look good*. You know exactly what you want: the legend moved to the bottom, larger axis labels, a custom color palette, etc. but can't figure out how to do it. Rather than spending hours in pain you ask: *Which resources can I leverage to make this plot nice, and how can I use them?*\n\n**Learning Goals: By the end of this subchapter, you should be able to:**\n\n1.  **Adopt a problem-solving mindset** for coding by:\n    * Focusing on strategies for finding answers rather than knowing everything.\n    * Identifying the part of your code you need.\n\n2.  **Navigate and use key resources** to find solutions by:\n    * Quickly finding relevant examples in books and blogs.\n    * Reading R's built-in `help()` files.\n\n4.  **Leverage modern tools to accelerate your workflow** by:\n    * Using graphical tools like the `ggThemeAssist` RStudio add-in to generate theme code automatically.\n    * Knowing how and when to effectively google for help. \n    * Using Generative AI (e.g., ChatGPT) responsibly to explain concepts, debug code, and suggest solutions.\n\n5.  **Know how and when to ask people for help** by preparing a clear, concise question with a minimal reproducible example.\n\n:::\n\n---\n\n### How to get good at making nice figures\n\nMaking nice figures can be super fun, and getting good at this is a great skill... but it's also somewhat \"encyclopedic\" -- more about memorization and knowing your options than creativity. So I think there are two mindsets we can take toward learning how to get good at making plots:\n\n:::aside\n**This section is relevant for all coding in all languages** This is simply the first time in the book I found it relevant. \n:::\n\n* ü§Æ **Rote memorization of the \"encyclopedic\" stuff** is boring and frustrating. No one wants to memorize weird ggplot things, and it feels shitty when you don‚Äôt know a specific trick.\n\n* ü´∂ **Building a problem-solving toolkit while making nice plots** is super empowering.\n\nI therefore focus on the latter strategy  -- rather than spending time memorizing all the ways to bend [`ggplot`](https://ggplot2.tidyverse.org/) to your will, there are a bunch of resources (below) that help us learn by doing (or at least learn as we are doing). To me, this is the best way to learn. \n\n:::protip\n**A key to getting help is figuring out what you actually need help with.**\nRegardless of which tool you use (AI, a friend, Google, or a book)  the first step is getting clear on what part you can do, and what part you‚Äôre stuck on. That separation makes it way easier to ask a good question, get a useful answer, and move forward.\n:::\n\n:::aside\n**No need to memorize anything:** We just need to get good at using the available tools and knowing when to use which. The even better news is that by using these tools regularly and effectively, you‚Äôll actually get better at making good plots on your own!\n:::\n\n\n\n\n### Books & Blogs\n\nIn my view, a good book or blogpost is the best way to learn (This is why I am writing this book, after all, and why I include additional resources in each chapter). Authors intentionally and patiently walk through the details of how to do something, and provide concepts and context to understand how and why it works. You  don‚Äôt need to read any of these cover-to-cover. Think of them more like cookbooks or survival guides: flip to the bit you need (or use the search feature), get the idea, and move on. **As noted above, a key is knowing what you need!**\n\n\n**A problem with a book** is that it may not have exactly the thing you need right now, and might it not get to the point quickly. In theory if you master the material in a book you are likely to be able to do more complex stuff, but we don't always have time for that. Sometimes we want the answer fast! \n\n\n:::fyi\n**For more advanced plotting and customization, take a look at these excellent resources:**. \n\n- [The R Graphics Cookbook](https://r-graphics.org/) [@chang2020].   \n- [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/) [@wickham2016].   \n- [Data Visualization: A Practical Introduction](https://socviz.co/) [@healy2018]. \n- [Modern Data Visualization with R](https://rkabacoff.github.io/datavis/) [@kabacoff2024].  \n:::\n\n\n\n### Helpfiles\n\nThe [`help()`](https://stat.ethz.ch/R-manual/R-devel/library/utils/html/help.html) function in R can provide fast information on how to use a specific function. For me helpfiles are incredibly useful, but they take some expertise to use effectively:  \n\n- **First you must know the function you need help with.** This isn't always easy, as if you knew the function you might not need help. If you don't know the function you need, or you can't make sense of the helpfile, try google! \n \n- **Second, even if you know the function you need help with, helpfiles can be hard to read.** Reading helpfiles is actually a skill. See [this nice resource](https://aosmith.rbind.io/2020/04/28/r-documentation/) to walk you through using a helpfile.  \n\nI suggest  skimming the helpfile and pay the most attention to      \n\n   - `Description`: What the function does.    \n   - `Usage`: How to run the function.  \n   - `Arguments`: What you give the function.   \n   - `Examples`: Some examples of using the function.\n\n\n:::fyi\n**Between a help file and ChatGPT** lies a sweet spot: custom [RAGs](https://en.wikipedia.org/wiki/Retrieval-augmented_generation) -- language models trained on specific documentation. For example, the top right of [https://ggplot2.tidyverse.org](https://ggplot2.tidyverse.org) has a button labeled **‚ÄúAsk AI‚Äù**. Clicking it brings you to a language model trained specifically on the help files for `dplyr`, `ggplot2`, and `tidyr`. It gives you answers grounded in the actual docs - without the pain of learning how to read them. \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The [ggplot website](https://ggplot2.tidyverse.org) has  an embedded RAG trained on dplyr, tidyr, and ggplot2 documentation.](../../figs/summarizing_data/betteR_plots/askAI.png){fig-alt='A screenshot of the ggplot2 documentation site header. It shows the text \"ggplot2 3.5.2\" followed by navigation links: \"Get started\", \"Reference\", \"News\", and \"Articles\". There is also a puzzle piece icon, a search bar labeled \"Search for\", a GitHub icon, and a button labeled \"Ask AI ‚ú®\".' width=1272}\n:::\n:::\n\n\n\n\n**Or paste the `help()` output into your favorite LLM**  and ask it to help you understand how to read the helpfile and use the function. \n:::\n\n\n\n### Google and Stackoverflow   \n\nThere is a lot of information on the internet, and Google is your friend. If you don't know how to do something, try googling it. Often Google searches lead to answers on [stackoverflow](https://en.wikipedia.org/wiki/Stack_Overflow) a question and answer website for computer science. \n\n:::aside\n**Don't ask questions on stackoverflow** Instead find answers there. Stackoverflow is not a particularly friendly place,  they are not gentle with noobs, and get upset when a question you asked could be answered by anything written in the history of stackoverflow.  \n:::\n\nGoogling is trickier than it sounds.  Like making sense of `help`, knowing the appropriate search term, separating helpful from unhelpful answers and identifying where the useful information in a webpage is are all skills. These skills require practice and basic knowledge of R. Therefore you will see these tools become more valuable as you get more confident with R. \n\n\n::: {.callout-tip collapse=\"true\"}\n## Google the error message (click to expand)\nSometimes R doesn't do what you want and spits out an error message\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(aes(x = pull(iris,Sepal.Length), \n           y = pull(iris,Petal.Length))) +\n     geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `fortify()`:\n! `data` must be a <data.frame>, or an object coercible by `fortify()`,\n  or a valid <data.frame>-like object coercible by `as.data.frame()`, not a\n  <uneval> object.\n‚Ñπ Did you accidentally pass `aes()` to the `data` argument?\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Googling the error message can help find the answer!](../../figs/summarizing_data/betteR_plots/google_the_error_message.png){fig-alt='A screenshot of a Google search for the R error message: \"ggplot(aes(x = Sepal.Length, y = Petal.Length, data = iris)) + geom_point() Error in \\'fortify()\\': ! \\'data\\' must be a data.frame...\". The top result is an AI Overview box explaining the error. It says that the mistake was passing the \\'aes()\\' function as the \\'data\\' argument, instead of passing the dataset \\'iris\\'. A corrected code snippet is shown: \\'ggplot(iris, aes(x = Sepal.Length, y = Petal.Length)) + geom_point()\\'. Below, there are Stack Overflow results related to the same error.' width=1278}\n:::\n:::\n\n\n\n\n:::\n\n### GUIs          \n\n**The  [`ggThemeAssist`](https://github.com/calligross/ggthemeassist/) package** provides a graphical user interface (GUI) that allows you to point and click your way to the desired figure. It then generates the corresponding R code for you (see @fig-ggthemeassist). I learned everything I know about the [`theme()`](https://ggplot2.tidyverse.org/reference/theme.html) function (a way to change font size, plot color etc...) from `ggThemeAssist`.\n\n:::aside\nAs of this writing ggplot changed the syntax for placing legends in a plot, so `ggThemeAssist`'s advice is wrong in that instance.\n:::\n\nTo use `ggThemeAssist`:\n\n1. Install and load the package.\n2. Create a `ggplot` in your R script.\n3. Select **ggplot Theme Assistant** from the add-ins drop-down menu.\n4. A GUI will appear. Point and click your way through the options, and the corresponding R code will be inserted into your script.  \n\n\n\n\n::: {.cell .column-page-right}\n::: {.cell-output-display}\n![An example of how to use the `ggThemeAssist` package from the `ggThemeAssist` [website](https://github.com/calligross/ggthemeassist/). Do yourself a favor and use this package.](https://github.com/calligross/ggthemeassist/blob/master/examples/ggThemeAssist2.gif?raw=true){#fig-ggthemeassist fig-alt='Screenshot of RStudio showing the use of the ggThemeAssist add-in. In the top-left script pane, code is written to assign a ggplot scatterplot of the mtcars dataset to the variable \\'gg\\'. The console below shows the code being run and ends with the command \\'ggThemeAssist:::ggthemeAssistAddin()\\', followed by the message \\'Listening on http://127.0.0.1:6919\\', indicating that the ggThemeAssist GUI has launched.'}\n:::\n:::\n\n\n\n\n\n\n### People  \n\nFriends, peers, mentors etc are the most valuable and useful help you can ask for - they often know where you're coming from, and have had experiences similar to you. The problem is that people have limited bandwidth, limited patience, and don't know everything. As in all cases in which we seek help, the clearer we can state our goal, and the more we can isolate our challenge the more useful the help we get will be. \n\n### Generative AI      \n\n\n\n\n:::aside\n**I wrote this in June 2025** GenAI is rapidly  evolving, and ?might? get better/change by the time you read this.  We currently don't know the future impact of LLMs and coding / stats / jobs etc...<br><br><br>\n**LLMs are trained on a huge amount of public code and documentation** But training  doesn‚Äôt always reflect the most up-to-date info. In my experience LLMs are particularly bad with  obscure R packages. In these cases  LLMs often guess plausible but incorrect syntax.\n:::\n\n\n\n\nWhen a friend isn‚Äôt available, there‚Äôs generative AI (e.g., Claude, ChatGPT, and the like). Unlike friends, GenAI tools have infinite patience and access to way more information. I encourage you to use them to improve your figures when necessary - but I also feel compelled to offer a few warnings and bits of guidance.\n\n\n\n--- \n\n**GenAI is most useful when you already know what you're doing.**  \n\nI‚Äôm pretty good at coding in R. When I ask ChatGPT or Claude for help, it‚Äôs *amazing*. It shows me useful ways to solve problems. When the answer isn‚Äôt quite right (and it often isn‚Äôt), I can fix it or build from it.  \n\nBy contrast, I know next to nothing about JavaScript. If I ask ChatGPT a JavaScript question and the answer is perfect, I‚Äôm in luck. But if it‚Äôs even a little off, I end up in a 90-minute debugging session with an LLM‚Äîand I‚Äôm no closer than when I started.\n\n\n---\n\n**Don't trust generative AI to be correct** These things are bullshitters. They don't understand thing. They are written to please us. I could go on about the limitations of LLM's - but I love them for making plots because it is so easy to see if they worked (does the plot look how I wanted it too) or not.\n\n---\n\n**Know when to quit (or at least change prompts)**   \n\nIf you are going in circles with your favorite LLM about how to make your plot how you want and it's just not working, take a step back. Think. Is this something GenAI cannot solve? Do I need to change my prompt? Do I need to think differently about the problem? etc.. Don't waste hours here.\n\n---\n\n**Asking ChatGPT a question and copy-pasting the code it gives you might work.** But if you want to actually learn‚Äîand avoid painful bugs‚Äîtry this:\n\n1. Read the code.\n2. Read the explanation it gives you.\n3. Run the code in R and see what happens. PAY ATTENTION. Is this what you wanted?  \n   - **If the code doesn‚Äôt work as expected,  tweak** the code  to have it do something slightly different. This helps make sure you understand what it's doing.   \n   -  **If the code doesn‚Äôt work as expected, go back** to ChatGPT, books, or Google. Iterate until you understand what‚Äôs going on.\n\n\n:::protip\n**GenAI is really good with error messages** When we Googled the error message above, the best answer was the automatic one from generative AI. Googling error messages can work, but often this sends us in the wrong direction because the error message does not light up the right keywords. \n:::\n\n\n\n:::warning\nDo not share any data with a generative AI tool (e.g., ChatGPT, Claude) that you wouldn‚Äôt be comfortable posting publicly. Once your data is submitted to an LLM, it‚Äôs not uniquely yours anymore. If you're working with sensitive or private data, do not paste them into a standard chatbot.\n\n- Use fake data with the same structure.   \n- Use a built-in R dataset (like `penguins`, `iris`, or `mtcars`) with a similar shape.\n\n\n:::\n\n\n\n\n\n::: {.cell}\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}